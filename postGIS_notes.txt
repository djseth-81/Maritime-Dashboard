# Some cool PostGIS functions: https://postgis.net/workshops/postgis-intro/geometries.html#function-list
- The following pages offer additional functions listed
- Expecting column containing geometric data to be labelled "geom"


- Specific to Linestrings
ST_Length(geom): Length of linestring as double(?)
ST_StartPoint(geom): first coordinate as a Point
ST_EndPoint(geom): last coordinate as a Point
ST_NPoints(geom): number of coordinates in linestring as int(?)

- Specific to Polygons
ST_Area(geom): area of Polygon as double(?)
ST_NRings(geom): number of "rings" as int(?)
    - Assume they mean boundaries
    - Typically 1, unless polygon has holes
ST_ExteriorRing(geom): outer "ring" as Linestring
ST_InteriorRingN(geom,n): interior ring 'n' as a Linestring
ST_Perimeter(geom): returns length of all rings as a double(?)

- Specific to Collections
ST_NumGeometries(geom): Number of parts in Collection as int(?)
ST_GeometryN(geom,n): specific simple geometry 'n'
ST_Area(geom): total area of all Polygon parts as double(?)
ST_Length(geom): total length of all linear parts as double(?)
    - assuming this includes Linestrings and ST_Perimeter(geom) for Polygons

- Useful to have other code read/write geom data
    - text
        ST_GeomFromText(text,srid): insert `geometry` from text with given srid
        ST_AsText(geom): returns data as a column in text
        ST_AsEWKT(geom): returns as text
            - what's the diff btwn EWKT, WKT, and regular text??
    - binary
        ST_GeomFromWKB(bytea): insert `geometry` from byte array
        ST_AsBinary(geom): returns data as binary
        ST_EWKB(geom): returns data as binary
        - Will need to execute an `Select encode(ST_AsBinary(*))` in order to convert binary into ASCII
    - GeoJSON
        ST_AsGeoJSON(geom): returns geom data as text, JSON-formatted
    - Scalable Vector Graphics (SVG)
        ST_AsSVG(geom): returns geom data as text, SVG-formatted

- Conditionals
ST_Equals(geomA,geomB): equality between two geometries
ST_Intersects(geomA,geomB): whether interiors of geometires share common space
ST_Disjoint(geomA,geomB): whether interiors of geometries DO NOT intersect
    - Not spatially indexed, unlinek ST_Intersects(); recommended to use not ST_Intersects() instead
ST_Crosses(geomA,geomB): whether intersection is one less dimension than the max dimension between geomA and geomB
    - Ex: Does a Linestring cross into a Polygon?
    - also checks geomA and geomB intersect
ST_Overlaps(geomA,geomB): whether two geometries of the same dimension have a set intersection with the same dimesnion
    - Ex: does two Polygon "areas" share points?
    - also checks of geomA and geomB
ST_Touches(geomA,geomB): whether two geometries touch at boundaries, but interiors DO NOT intersect
ST_Contains(geomA,geomB): whether geomB is fully within geomA
ST_Within(geomA,geomB): whether geomA is fully within geomB
ST_Distance(geomA,geomB): shortest distance between two geometries as double
ST_DWithin(geomA,geomB,n): whether geomB is within n distance of geomA
    - scales pseudo-area from geomA by n 

# PostgreSQL plugins
- C/C++: https://www.postgresql.org/docs/current/libpq.html

# Quirks
- Windows conventionally saves it in "C:\Program Files\PostgreSQL\17"
    - need to move it out to use pygresql

### Installing PyGreSQL
sudo dnf install postgresql-devel

### Notes
- MUST EXECUTE `create extension postgis;` BEFORE IMPORTING ANY DATA
    - otherwise spatial_ref_sys, geom, metadata shit all breaks down

- Two metadata tables to track/report geometry types
    - spatial_ref_sys
        - defines all spatial ref systems known to db
    - geometry_columns
        - apparently it's actually a "view"???
        - lists all features (object with geometric attributes), and basic details of said features
            - f_table_name relates to feature table
                - attributes: table_name, geometry_column, attributes
            - srid relates to spatial_ref_sys

- geometry_columns
    - f_table_catalog: 
        - fully qualified name of table featuring given geometry
        - tends to be empty, since postgreSQL doesn't use catalogs
            - in demo's case, db 'nyc' populates (?)
    - f_table_schema
        - schema of table featuring geometry
    - f_table_name
        - name of table containing geometry details
    - f_geometry_column
        - name of column containing geometry data
        - can see multiple entries when multiple columns house geom data
    - coord_dimension
        - defines demension of geometry
    - srid
        - defines identifier referencing spatial_ref_sys
    - type
        - type of geometry found in table

- Collections
    - groups simple geometries into sets
    - types:
        MultiPoint: collection of Points
        MultiLineString: collection of Linestrings
        MultiPolygon: Collection of Polygons
        GeometryCollection: Heterogeneous collection of any simple geometry types

- Spatial Joints: https://postgis.net/workshops/postgis-intro/joins.html#
    - useful to combine info from different tables using spatial relationships!
    SELECT ... AS "thing" lets us re-label what is selected as "thing"
    JOIN creates virtual table
    WHERE provides our conditional to filter said virtual table
    !!! ON is where we can specify our PostGIS conditional based off geometry. THIS IS THE KEY !!!
    ORDER BY allows us to sort table as needed

- Spatial Indexing: https://postgis.net/workshops/postgis-intro/indexing.html

### Migrating DB to new location:
- Config file: /var/lib/pgsql/data/postgresql.conf
- data directory: /var/lib/pgsql/data


























